archetype nonfungible(const first_owner : address)

/* STORAGE --------------------------------------------------------------------*/

asset token {
  tid        : nat;
  tprice     : tez;
} initialized by {
  { 973012;  1.3tz };
  { 973013;  2.2tz };
  { 973014;  1.4tz };
  { 973015;  3.4tz };
  { 973016;  2.8tz };
  { 973017;  1.0tz };
  { 973018;  2.4tz };
  { 973019;  4.1tz };
  { 973020; 12.4tz };
  { 973021; 18.9tz };
  { 973022;  1.2tz };
  { 973023;  2.7tz };
  { 973024;  4.0tz };
  { 973025;  1.9tz };
  { 973026;  3.7tz };
  { 973027;  4.1tz };
  { 973028;  2.5tz };
  { 973029;  0.4tz };
  { 973030;  1.9tz };
  { 973031;  0.5tz };
  { 973032;  0.4tz };
  { 973033;  0.2tz };
  { 973034;  7.8tz };
  { 973035;  5.6tz };
  { 973036;  5.6tz };
  { 973037;  5.6tz };
  { 973038;  5.6tz };
  { 973039;  7.6tz };
  { 973040;  5.3tz };
  { 973041;  5.3tz };
  { 973042;  1.4tz };
  { 973043;  8.6tz };
  { 973044;  4.9tz };
  { 973045;  5.3tz };
  { 973046;  9.5tz };
  { 973047;  7.5tz };
  { 973048;  8.0tz };
  { 973049;  7.4tz };
  { 973050;  6.1tz };
  { 973051;  5.0tz };
  { 973052;  3.1tz };
  { 973053;  6.7tz };
  { 973054;  8.0tz };
  { 973055;  4.0tz };
  { 973056;  4.1tz };
  { 973057;  3.1tz };
  { 973058; 12.1tz };
  { 973059;  4.7tz };
  { 973060;  3.2tz };
  { 973061;  4.5tz };
  { 973062;  3.5tz };
  { 973063;  3.4tz };
  { 973064;  5.6tz };
  { 973065;  3.3tz };
  { 973066;  3.6tz };
  { 973067;  3.5tz };
  { 973068;  3.3tz };
  { 973069;  4.1tz };
  { 973070;  3.6tz };
  { 973071;  3.7tz };
  { 973072;  3.2tz };
  { 973073;  5.1tz };
  { 973074; 12.1tz };
  { 973075;  9.5tz };
  { 973076; 14.1tz };
  { 973077; 10.5tz };
  { 973078; 11.3tz };
  { 973079; 10.5tz };
  { 973080; 10.5tz };
  { 973081;  4.5tz };
  { 973082; 10.5tz };
  { 973083; 13.4tz };
  { 973084; 17.6tz };
  { 973085; 27.6tz };
  { 973086; 39.6tz };
  { 973087; 42.6tz };
  { 973088; 34.3tz };
  { 973089; 28.3tz };
  { 973090; 44.2tz };
  { 973091; 26.4tz };
  { 973092; 24.5tz };
  { 973093; 23.9tz };
  { 973094; 14.3tz };
  { 973095; 12.3tz };
  { 973096; 11.3tz };
  { 973097;  6.5tz };
  { 973098;  4.9tz };
  { 973099;  8.4tz };
  { 973100;  4.3tz };
  { 973101;  4.2tz };
  { 973102;  4.5tz };
  { 973103; 12.3tz };
  { 973104; 15.6tz };
  { 973105;  4.6tz };
  { 973106;  5.5tz };
  { 973107;  4.5tz };
  { 973108;  2.3tz };
  { 973109;  4.5tz };
  { 973110;  4.2tz };
  { 973111;  3.2tz };
  { 973112;  2.2tz };
  { 973113;  1.4tz }
}

asset ledger identified by ltoken {
  ltoken     : nat;
  lowner     : address;
} initialized by {
  { 973012; first_owner };
  { 973013; first_owner };
  { 973014; first_owner };
  { 973015; first_owner };
  { 973016; first_owner };
  { 973017; first_owner };
  { 973018; first_owner };
  { 973019; first_owner };
  { 973020; first_owner };
  { 973021; first_owner };
  { 973022; first_owner };
  { 973023; first_owner };
  { 973024; first_owner };
  { 973025; first_owner };
  { 973026; first_owner };
  { 973027; first_owner };
  { 973028; first_owner };
  { 973029; first_owner };
  { 973030; first_owner };
  { 973031; first_owner };
  { 973032; first_owner };
  { 973033; first_owner };
  { 973034; first_owner };
  { 973035; first_owner };
  { 973036; first_owner };
  { 973037; first_owner };
  { 973038; first_owner };
  { 973039; first_owner };
  { 973040; first_owner };
  { 973041; first_owner };
  { 973042; first_owner };
  { 973043; first_owner };
  { 973044; first_owner };
  { 973045; first_owner };
  { 973046; first_owner };
  { 973047; first_owner };
  { 973048; first_owner };
  { 973049; first_owner };
  { 973050; first_owner };
  { 973051; first_owner };
  { 973052; first_owner };
  { 973053; first_owner };
  { 973054; first_owner };
  { 973055; first_owner };
  { 973056; first_owner };
  { 973057; first_owner };
  { 973058; first_owner };
  { 973059; first_owner };
  { 973060; first_owner };
  { 973061; first_owner };
  { 973062; first_owner };
  { 973063; first_owner };
  { 973064; first_owner };
  { 973065; first_owner };
  { 973066; first_owner };
  { 973067; first_owner };
  { 973068; first_owner };
  { 973069; first_owner };
  { 973070; first_owner };
  { 973071; first_owner };
  { 973072; first_owner };
  { 973073; first_owner };
  { 973074; first_owner };
  { 973075; first_owner };
  { 973076; first_owner };
  { 973077; first_owner };
  { 973078; first_owner };
  { 973079; first_owner };
  { 973080; first_owner };
  { 973081; first_owner };
  { 973082; first_owner };
  { 973083; first_owner };
  { 973084; first_owner };
  { 973085; first_owner };
  { 973086; first_owner };
  { 973087; first_owner };
  { 973088; first_owner };
  { 973089; first_owner };
  { 973090; first_owner };
  { 973091; first_owner };
  { 973092; first_owner };
  { 973093; first_owner };
  { 973094; first_owner };
  { 973095; first_owner };
  { 973096; first_owner };
  { 973097; first_owner };
  { 973098; first_owner };
  { 973099; first_owner };
  { 973100; first_owner };
  { 973101; first_owner };
  { 973102; first_owner };
  { 973103; first_owner };
  { 973104; first_owner };
  { 973105; first_owner };
  { 973106; first_owner };
  { 973107; first_owner };
  { 973108; first_owner };
  { 973109; first_owner };
  { 973110; first_owner };
  { 973111; first_owner };
  { 973112; first_owner };
  { 973113; first_owner }
}


asset operator identified by oaddr otoken oowner {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
}

/* FA2 INTERFACE -------------------------------------------------------------*/

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

entry update_operators (upl : list<or<operator_param, operator_param>>) {
  for up in upl do
    match up with
    | left(param)  -> // add
      dorequire(ledger[param.opp_token_id].lowner = source, "CALLER NOT OWNER");
      operator.addupdate((param.opp_operator, param.opp_token_id, param.opp_owner), {})
    | right(param) -> // remove
      dorequire(ledger[param.opp_token_id].lowner = source, "CALLER NOT OWNER");
      operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
    end;
  done;
}

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((to_, (token_id, amount)))

entry %transfer (txs : list<address * list<transfer_destination>>) {
  for tx in txs do
    var %from = tx[0];
    var tds = tx[1];
    for td in tds do begin
      if caller <> %from then begin
        // check operator
        dorequire(operator.contains((caller,td.token_id_dest,%from)),"FA2_NOT_OPERATOR");
      end;
      // set token ownership
      ledger.addupdate(td.token_id_dest,{ lowner = td.to_dest });
    end done;
  done
}

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br -> {
    request = br;
    balance_ = (if ledger[br.btoken_id].lowner = br.bo_owner
                then 1
                else 0)
  })
}

entry token_metadata_registry (c : contract<address>) { transfer 0tz to entry c(selfaddress); }

asset token_metadata to big_map {
  key_token_id   : nat;
  token_id       : nat;
  symbol         : string;
  name           : string;
  decimals       : nat;
  extras         : map<string, string>;
} initialized by {
  { 1; 1; "CRB"; "CRYPTOBOKEN"; 0; [] }
}

/* TOKEN EXCHANGE INTERFACE ---------------------------------------------------*/

entry buy (tokenids : list<nat>) {
  var total = 0;
  for tokenid in tokenids do begin
    var price = token[tokenid].tprice;
    var owner = ledger[tokenid].lowner;
    transfer price to owner;
    /* transfer ownership */
    transfer 0tz to entry self.%transfer([(owner,[{
      to_dest = caller;
      token_id_dest = tokenid;
      token_amount_dest = 1
    }])]);
    /* reset permission */
    transfer 0tz to entry self.update_operators([right<operator_param>({
        opp_owner = owner;
        opp_operator = selfaddress;
        opp_token_id = tokenid
      })]);
    total += price;
  end done;
  dorequire(transferred >= total, "INSUFFICIENT_TRANSFERRED");
  operations := reverse(operations);
}

entry sell (tokenid : nat) {
  transfer 0tz to entry self.update_operators([left<operator_param>({
    opp_owner = caller;
    opp_operator = selfaddress;
    opp_token_id = tokenid
  })])
}

/* administration */

variable admin : address = @tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg

entry reset() {
  called by admin
  effect {
    for token_id_ledger in ledger do
      operator.addupdate((selfaddress, token_id_ledger, ledger[token_id_ledger].lowner), {})
    done
  }
}
